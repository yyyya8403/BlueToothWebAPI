<!doctype html>
<html lang="ja">
<head>
  <meta charset="utf-8" />
  <title>Web Bluetooth Demo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { font-family: system-ui, sans-serif; margin: 24px; }
    button { padding: 10px 14px; border-radius: 10px; border: 1px solid #ccc; margin: 6px 8px 6px 0; }
    input { padding: 8px; width: 260px; }
    #log { white-space: pre-wrap; background:#f7f7f7; padding:12px; border-radius:8px; min-height: 140px; }
    .row { margin: 10px 0; }
  </style>
</head>
<body>
  <h1>Web Bluetooth: 探す→接続→操作</h1>

  <div class="row">
    <label>Service UUID（例: 0x180F = Battery Service）</label><br/>
    <input id="serviceUuid" value="0x180F" />
  </div>

  <div class="row">
    <label>Characteristic UUID（例: 0x2A19 = Battery Level）</label><br/>
    <input id="charUuid" value="0x2A19" />
  </div>

  <div class="row">
    <label>名前プレフィックス（任意。例: "ESP", "BBC micro:bit" など）</label><br/>
    <input id="namePrefix" placeholder="空なら全デバイスから選択（接続時にServiceを要求）" />
  </div>

  <div class="row">
    <button id="btnScan">🔎 探して接続</button>
    <button id="btnDisconnect" disabled>🔌 切断</button>
  </div>

  <div class="row">
    <button id="btnRead" disabled>📥 Read</button>
    <button id="btnWrite" disabled>📤 Write(0x01)</button>
    <button id="btnNotifyStart" disabled>🔔 Start Notify</button>
    <button id="btnNotifyStop" disabled>🔕 Stop Notify</button>
  </div>

  <h3>Log</h3>
  <div id="log"></div>

<script>
(() => {
  const $ = (id) => document.getElementById(id);
  const log = (msg) => { $('log').textContent += msg + '\n'; };

  let device = null;
  let server = null;
  let characteristic = null;

  const uiState = (connected) => {
    $('btnDisconnect').disabled   = !connected;
    $('btnRead').disabled         = !connected;
    $('btnWrite').disabled        = !connected;
    $('btnNotifyStart').disabled  = !connected;
    $('btnNotifyStop').disabled   = !connected;
    $('btnScan').disabled         = connected;
  };

  async function scanAndConnect() {
    try {
      const serviceUuid = $('serviceUuid').value.trim();
      const charUuid = $('charUuid').value.trim();
      const namePrefix = $('namePrefix').value.trim();

      if (!serviceUuid) {
        alert('Service UUID を入力してください。例: 0x180F');
        return;
      }

      const filters = [];
      if (namePrefix) filters.push({ namePrefix });

      // デバイス選択: フィルタが無い場合は acceptAllDevices: true
      const options = filters.length
        ? { filters, optionalServices: [serviceUuid] }
        : { acceptAllDevices: true, optionalServices: [serviceUuid] };

      log('📡 requestDevice を呼び出し中…');
      device = await navigator.bluetooth.requestDevice(options);

      device.addEventListener('gattserverdisconnected', onDisconnected);

      log(`✅ 選択: ${device.name || '(no name)'} [id=${device.id}]`);
      log('🔗 接続中…');
      server = await device.gatt.connect();
      log('✅ 接続しました');

      const service = await server.getPrimaryService(serviceUuid);
      log(`🧩 Service(${serviceUuid}) を取得`);

      characteristic = await service.getCharacteristic(charUuid);
      log(`🧬 Characteristic(${charUuid}) を取得`);

      uiState(true);
    } catch (err) {
      log('❌ ' + err);
      cleanup();
    }
  }

  function onDisconnected() {
    log('🔌 デバイスが切断されました');
    cleanup();
  }

  function cleanup() {
    characteristic = null;
    server = null;
    if (device && device.gatt && device.gatt.connected) {
      try { device.gatt.disconnect(); } catch {}
    }
    device = null;
    uiState(false);
  }

  async function disconnect() {
    try {
      if (device && device.gatt.connected) device.gatt.disconnect();
    } catch (e) {
      log('❌ ' + e);
    } finally {
      cleanup();
    }
  }

  async function readValue() {
    if (!characteristic) return;
    try {
      const value = await characteristic.readValue();
      // Battery Level(0x2A19) は 0–100 の1バイト
      const bytes = new Uint8Array(value.buffer);
      log('📥 Read: [' + Array.from(bytes).join(', ') + ']');
    } catch (e) {
      log('❌ Read失敗: ' + e);
    }
  }

  async function writeValue() {
    if (!characteristic) return;
    try {
      // デモ用: 1バイト 0x01 を書き込む
      // ※ 多くのデバイス/特性は書き込み不可。実機仕様に合わせて変更してください。
      const data = new Uint8Array([0x01]);
      await characteristic.writeValue(data);
      log('📤 Write: [0x01] 送信しました');
    } catch (e) {
      log('❌ Write失敗: ' + e);
    }
  }

  async function startNotify() {
    if (!characteristic) return;
    try {
      await characteristic.startNotifications();
      characteristic.addEventListener('characteristicvaluechanged', (ev) => {
        const v = new Uint8Array(ev.target.value.buffer);
        log('🔔 Notify: [' + Array.from(v).join(', ') + ']');
      });
      log('🔔 通知購読を開始しました');
    } catch (e) {
      log('❌ 通知開始失敗: ' + e);
    }
  }

  async function stopNotify() {
    if (!characteristic) return;
    try {
      await characteristic.stopNotifications();
      log('🔕 通知購読を停止しました');
    } catch (e) {
      log('❌ 通知停止失敗: ' + e);
    }
  }

  // 初期UI
  uiState(false);

  // イベント
  $('btnScan').addEventListener('click', async () => {
    if (!('bluetooth' in navigator)) {
      alert('このブラウザは Web Bluetooth に対応していません。Chrome/Edge をお試しください。');
      return;
    }
    await scanAndConnect();
  });

  $('btnDisconnect').addEventListener('click', disconnect);
  $('btnRead').addEventListener('click', readValue);
  $('btnWrite').addEventListener('click', writeValue);
  $('btnNotifyStart').addEventListener('click', startNotify);
  $('btnNotifyStop').addEventListener('click', stopNotify);
})();
</script>
</body>
</html>
